name: Codex

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write

jobs:
  codex:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@codex')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@codex'))
    runs-on: ubuntu-latest
    outputs:
      final_message: ${{ steps.codex.outputs.final-message }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run Codex
        uses: openai/codex-action@v1
        id: codex
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          prompt: >-
            You are working in a Next.js 15 app with React 19, TypeScript, Tailwind CSS, Shadcn UI, Drizzle ORM, and Vitest.
            Read and follow all coding standards and best practices from the CLAUDE.md file in the repository root.
            Read the repository, run the test suite, identify the minimal change needed to make all tests pass, implement only that change, and stop.
            Do not refactor unrelated code or files. Keep changes small and surgical.
          codex_args: '["--config","sandbox_mode=\"workspace-write\""]'

  post_feedback:
    runs-on: ubuntu-latest
    needs: codex
    if: needs.codex.outputs.final_message != ''
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Post Codex feedback
        uses: actions/github-script@v7
        env:
          CODEX_MESSAGE: ${{ needs.codex.outputs.final_message }}
        with:
          github-token: ${{ github.token }}
          script: |
            const pr = context.payload.pull_request?.number || context.payload.issue?.number;
            if (pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: process.env.CODEX_MESSAGE,
              });
            }
