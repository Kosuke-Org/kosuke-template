name: Build and Publish

on:
  push:
    branches: [main]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Copy environment variables
        run: cp .env.example .env

      - name: Run ESLint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build

  migrate-database:
    name: Run Database Migrations
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run database migrations
        run: pnpm run db:migrate
        env:
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}

  create-tag-and-push:
    name: Create Tag and Push Docker image
    needs: [test, migrate-database]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get latest tag or create initial tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          LATEST_TAG=${{ env.LATEST_TAG }}
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          # Increment patch version
          PATCH=$((PATCH + 1))

          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository_owner }}/kosuke-template:${{ env.NEW_TAG }},ghcr.io/${{ github.repository_owner }}/kosuke-template:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
