name: Cursor

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  code-review:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@cursor')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@cursor')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@cursor'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Add reaction to trigger comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Perform automated code review
        id: review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          # Extract PR number based on event type
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="${{ github.event.issue.number }}"
          fi

          cursor-agent --force --model sonnet-4.5 --output-format=text --print "You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN and GH_REPO is set. Read and follow ALL rules from .cursor/rules/ in this repository. You may comment on pull requests.

          Context:
          - Repo: ${{ github.repository }}
          - PR Number: $PR_NUMBER

          Objectives:
          1) Check existing review comments and reply ‚úÖ when issues are resolved
          2) Review the PR diff for code quality and architecture patterns
          3) Flag only clear, high-severity issues (bugs, security, type safety, pattern violations)
          4) Ignore: formatting, style, naming (pre-commit handles these)
          5) Leave very short inline comments (1-2 sentences) on changed lines only

          Procedure:
          - Get existing comments: gh pr view $PR_NUMBER --json comments
          - Get diff: gh pr diff $PR_NUMBER
          - If a previously reported issue appears fixed by recent changes, reply: ‚úÖ This issue appears to be resolved by the recent changes
          - Avoid duplicates: skip if similar feedback already exists on or near the same lines
          - Check: type safety, error handling, auth/data ownership, DB queries, API patterns

          Commenting Rules:
          - Max 10 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - Natural tone, specific and actionable
          - Use emojis to categorize: üö® Critical (security/crash), üîí Security (auth/data), ‚ö° Performance, ‚ö†Ô∏è Logic (bugs), ‚ú® Pattern (architecture), ‚úÖ Resolved

          Submission:
          - Submit one review containing inline comments plus a concise summary
          - Use only: gh pr review $PR_NUMBER --comment
          - Do not use: gh pr review --approve or --request-changes"
